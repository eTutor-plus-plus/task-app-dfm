generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model tasks {
  id               Int            @id
  taskGroupId      Int?           @map("task_group_id")
  maxPoints        Float          @map("max_points")
  taskType         String         @map("task_type") @db.VarChar(100)
  status           Status         @default(DRAFT)
  additionalData   additionalData @relation(fields: [additionalDataId], references: [id], onDelete: Cascade)
  additionalDataId Int            @unique
  uniqueNames      String[]
}

model additionalData {
  id                 Int                  @id @default(autoincrement())
  solution           String               @db.VarChar(5000)
  descriptionDe      String?              @db.VarChar(5000)
  descriptionEn      String?              @db.VarChar(5000)
  difficulty         Int?
  abstractSyntaxTree Json                 @db.Json
  evaluationCriteria evaluationCriteria[]
  task               tasks?
}

model evaluationCriteria {
  id                 Int            @id @default(autoincrement())
  name               String?        @db.VarChar(255)
  points             Float
  subtree            String         @db.VarChar(5000)
  abstractSyntaxTree Json           @db.Json
  additionalDataId   Int
  additionalData     additionalData @relation(fields: [additionalDataId], references: [id], onDelete: Cascade)
}

model submissions {
  id            String     @id @default(cuid())
  userId        String     @map("user_id") @db.VarChar(255)
  assignmentId  String     @map("assignment_id") @db.VarChar(255)
  taskId        Int        @map("task_id")
  language      Language
  mode          Mode
  feedbackLevel Int        @map("feedback_level")
  submission    submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId  Int        @unique
}

model submission {
  id         Int          @id @default(autoincrement())
  input      String       @db.VarChar(1000)
  submission submissions?
}

model grading {
  id           String @id @default(cuid())
  submissionId Int    @map("submission_id")
  taskId       Int    @map("task_id")
  points       Int
  // TOOD: Add criteria depending on the evaluation system
}

enum Language {
  EN
  DE
}

enum Mode {
  RUN
  DIAGNOSE
  SUBMIT
}

enum Status {
  DRAFT
  READY_FOR_APPROVAL
  APPROVED
}
