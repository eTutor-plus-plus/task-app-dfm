generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model tasks {
  id               Int            @id
  taskGroupId      Int?           @map("task_group_id")
  maxPoints        Float          @map("max_points")
  taskType         String         @map("task_type") @db.VarChar(100)
  status           Status         @default(DRAFT)
  additionalData   additionalData @relation(fields: [additionalDataId], references: [id], onDelete: Cascade)
  additionalDataId String         @unique
  uniqueNames      String[]
  submissions      submissions[]
}

model additionalData {
  id                 String                @id @default(cuid())
  solution           String                @db.VarChar(5000)
  descriptionDe      String?               @db.VarChar(5000)
  descriptionEn      String?               @db.VarChar(5000)
  difficulty         Int?
  abstractSyntaxTree Json                  @db.Json
  evaluationCriteria evaluationCriterias[]
  task               tasks?
}

model evaluationCriterias {
  id                 String         @id @default(cuid())
  name               String?        @db.VarChar(255)
  points             Float
  subtree            String         @db.VarChar(5000)
  abstractSyntaxTree Json           @db.Json
  allowAdditionalElements Boolean @map("allow_additional_elements") @default(false)
  allowIncorrectFactClass Boolean @map("allow_incorrect_fact_class") @default(false)
  additionalDataId   String
  additionalData     additionalData @relation(fields: [additionalDataId], references: [id], onDelete: Cascade)
}

model submissions {
  id            String     @id @default(cuid())
  userId        String     @map("user_id") @db.VarChar(255)
  assignmentId  String     @map("assignment_id") @db.VarChar(255)
  task          tasks      @relation(fields: [taskId], references: [id], onDelete: NoAction)
  taskId        Int        @map("task_id")
  language      Language
  mode          Mode
  feedbackLevel Int        @map("feedback_level")
  submission    submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId  String     @unique
  grading       grading[]
  gradingAvailable Boolean @map("grading_available") @default(false)

}

model submission {
  id         String       @id @default(cuid())
  input      String       @db.VarChar(5000)
  submission submissions?
}

model grading {
  id               String             @id @default(cuid())
  submission       submissions        @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId     String             @unique @map("submission_id")
  points           Int
  generalFeedback  String?            @db.VarChar(5000)
  gradingCriterias gradingCriterias[]
}

model gradingCriterias {
  id        String  @id @default(cuid())
  name      String? @db.VarChar(255)
  points    Float?
  passed    Boolean?
  feedback  String? @db.VarChar(10000)
  grading   grading @relation(fields: [gradingId], references: [id], onDelete: Cascade)
  gradingId String
}

enum Language {
  EN
  DE
}

enum Mode {
  RUN
  DIAGNOSE
  SUBMIT
}

enum Status {
  DRAFT
  READY_FOR_APPROVAL
  APPROVED
}
